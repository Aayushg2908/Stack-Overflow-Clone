datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model User {
  id               String  @id @default(uuid()) @map("_id") @db.ObjectId
  clerkId          String  @unique
  name             String
  username         String  @unique
  email            String  @unique
  picture          String
  bio              String?
  location         String?
  portfolioWebsite String?
  reputation       Int     @default(0)

  savedId String[]   @db.ObjectId
  saved   Question[] @relation("saveQuestions", fields: [savedId], references: [id])

  questions Question[] @relation("author")

  answers Answer[]

  upvotedQuestionId String[]   @db.ObjectId
  upvoted           Question[] @relation("Upvotes", fields: [upvotedQuestionId], references: [id])

  downvotedQuestionId String[]   @db.ObjectId
  downvoted           Question[] @relation("Downvotes", fields: [downvotedQuestionId], references: [id])

  upvotedAnswerId String[] @db.ObjectId
  upVotedAnswers  Answer[] @relation("Upvotes", fields: [upvotedAnswerId], references: [id])

  downvotedAnswerId String[] @db.ObjectId
  downVotedAnswers  Answer[] @relation("Downvotes", fields: [downvotedAnswerId], references: [id])

  createdAt DateTime @default(now())
}

model Tags {
  id   String @id @default(uuid()) @map("_id") @db.ObjectId
  name String @unique

  questionId String[]   @db.ObjectId
  questions  Question[] @relation("tags", fields: [questionId], references: [id])

  createdAt DateTime @default(now())
}

model Question {
  id      String @id @default(uuid()) @map("_id") @db.ObjectId
  title   String
  content String

  savedById String[] @db.ObjectId
  savedBy   User[]   @relation("saveQuestions", fields: [savedById], references: [id])

  authorId String @db.ObjectId
  author   User   @relation("author", fields: [authorId], references: [id])

  questionId String[] @db.ObjectId
  tags       Tags[]   @relation("tags", fields: [questionId], references: [id])

  answers Answer[]

  upvotedUserId String[] @db.ObjectId
  upvotes       User[]   @relation("Upvotes", fields: [upvotedUserId], references: [id])

  downvotedUserId String[] @db.ObjectId
  downvotes       User[]   @relation("Downvotes", fields: [downvotedUserId], references: [id])

  createdAt DateTime @default(now())

  @@index([authorId])
}

model Answer {
  id      String @id @default(uuid()) @map("_id") @db.ObjectId
  content String

  authorId String @db.ObjectId
  author   User   @relation(fields: [authorId], references: [id])

  questionId String   @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id])

  upvotedUserId String[] @db.ObjectId
  upvotes       User[]   @relation("Upvotes", fields: [upvotedUserId], references: [id])

  downvotedUserId String[] @db.ObjectId
  downvotes       User[]   @relation("Downvotes", fields: [downvotedUserId], references: [id])

  createdAt DateTime @default(now())

  @@index([authorId])
  @@index([questionId])
}
